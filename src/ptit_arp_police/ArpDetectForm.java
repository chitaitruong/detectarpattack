/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ptit_arp_police;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.URL;
import java.net.UnknownHostException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.Timer;
import javax.swing.border.Border;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Asus
 */
public class ArpDetectForm extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form ArpDetectForm
     */
    Timer timer;
    AlertAudio alertAudio;
    ImageIcon isAttacked = new ImageIcon("D:\\Java\\PTIT_ARP_POLICE\\src\\ptit_arp_police\\no1.png");
    ImageIcon isNone = new ImageIcon("D:\\Java\\PTIT_ARP_POLICE\\src\\ptit_arp_police\\yes1.png");
    Log log = new Log();
    ArrayList<IPMAC> old_ip_mac_list = new ArrayList<>();
    ArrayList<IPMAC> new_ip_mac_list = new ArrayList<>();
    Object data[][];
    String[] column = {"", "IP", "MAC", "LAST SEEN"};
    DefaultTableModel model;
    boolean check = true;

    public ArpDetectForm() throws IOException, UnsupportedAudioFileException, LineUnavailableException {
        initComponents();
        old_ip_mac_list=scanARPTable();
        new_ip_mac_list.addAll(old_ip_mac_list);
        loadDataToTable(old_ip_mac_list, new_ip_mac_list);
        this.setLocationRelativeTo(null);
        timer = new Timer(10000, this);
        timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtAlert = new javax.swing.JLabel();
        chBoxAudio = new javax.swing.JCheckBox();
        chBoxEmail = new javax.swing.JCheckBox();
        txtAudio = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        btnAudio = new javax.swing.JButton();
        btnScan = new javax.swing.JButton();
        lbCheck = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PTITHCM_ARP_POLICE");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(51, 51, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Status:");

        txtAlert.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        txtAlert.setText("No ARP Attacks");

        chBoxAudio.setSelected(true);
        chBoxAudio.setText("Audio Warning");
        chBoxAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chBoxAudioActionPerformed(evt);
            }
        });

        chBoxEmail.setSelected(true);
        chBoxEmail.setText("Email Warning");
        chBoxEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chBoxEmailActionPerformed(evt);
            }
        });

        txtAudio.setEditable(false);

        txtEmail.setEditable(false);
        txtEmail.setText("taistudymyself.1@gmail.com");
        txtEmail.setToolTipText("");

        btnAudio.setText("Audio Choose");
        btnAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAudioActionPerformed(evt);
            }
        });

        btnScan.setFont(new java.awt.Font("Consolas", 0, 22)); // NOI18N
        btnScan.setText("Reset");
        btnScan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScanActionPerformed(evt);
            }
        });

        lbCheck.setForeground(new java.awt.Color(240, 240, 240));
        lbCheck.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ptit_arp_police/yes1.png"))); // NOI18N
        lbCheck.setMaximumSize(new java.awt.Dimension(32, 32));
        lbCheck.setMinimumSize(new java.awt.Dimension(32, 32));
        lbCheck.setPreferredSize(new java.awt.Dimension(32, 32));

        jTable1.setBackground(new java.awt.Color(204, 204, 204));
        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable1.setForeground(new java.awt.Color(102, 51, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chBoxAudio)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lbCheck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtAlert))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chBoxEmail)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtAudio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnAudio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(148, 148, 148)
                        .addComponent(btnScan, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(165, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbCheck, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtAlert, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(chBoxAudio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAudio, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAudio, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(chBoxEmail)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnScan, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(130, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnScanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScanActionPerformed
        int a = JOptionPane.showConfirmDialog(null, "Are you sure?", "Reset", 1);
        if (a == 0) {
            try {
                loadDataToTable(old_ip_mac_list, new_ip_mac_list);
                timer.restart();
            } catch (IOException ex) {
                Logger.getLogger(ArpDetectForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedAudioFileException ex) {
                Logger.getLogger(ArpDetectForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (LineUnavailableException ex) {
                Logger.getLogger(ArpDetectForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnScanActionPerformed

    private void btnAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAudioActionPerformed
        //Gioi han loai file
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setDialogTitle("Select Audio");
        jfc.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("MP3 and WAV Audio ", "wav", "mp3");
        jfc.addChoosableFileFilter(filter);
        int returnValue = jfc.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            txtAudio.setText(jfc.getSelectedFile().getAbsolutePath());
            txtAudio.setEditable(false);
        }
    }//GEN-LAST:event_btnAudioActionPerformed

    private void chBoxAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chBoxAudioActionPerformed
        // TODO add your handling code here:
        if (!chBoxAudio.isSelected()) {
            btnAudio.setEnabled(false);
        } else {
            btnAudio.setEnabled(true);
        }
    }//GEN-LAST:event_chBoxAudioActionPerformed

    private void chBoxEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chBoxEmailActionPerformed
        // TODO add your handling code here:
        if (chBoxEmail.isSelected())
            txtEmail.setEditable(true);
        else {
            txtEmail.setEditable(false);
        }
    }//GEN-LAST:event_chBoxEmailActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArpDetectForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArpDetectForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArpDetectForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArpDetectForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new ArpDetectForm().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(ArpDetectForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedAudioFileException ex) {
                    Logger.getLogger(ArpDetectForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (LineUnavailableException ex) {
                    Logger.getLogger(ArpDetectForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAudio;
    private javax.swing.JButton btnScan;
    private javax.swing.JCheckBox chBoxAudio;
    private javax.swing.JCheckBox chBoxEmail;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbCheck;
    private javax.swing.JLabel txtAlert;
    private javax.swing.JTextField txtAudio;
    private javax.swing.JTextField txtEmail;
    // End of variables declaration//GEN-END:variables

    private String getTime() {

        LocalDateTime current = LocalDateTime.now();

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

        String formatted = current.format(formatter);

        //System.out.println("\n\nNgày giờ hiện tại: " + formatted);
        return formatted;
    }

    // Thong bao bi tan cong
    private void ArpConfirm() throws UnsupportedAudioFileException, IOException, LineUnavailableException {
        String[] respones = {"I know it"};
        while (true) {
            int a = JOptionPane.showOptionDialog(null, "You are being ARP attacked", "Warning", JOptionPane.NO_OPTION, JOptionPane.WARNING_MESSAGE, null, respones, 0);
            if (a == 0) {
                if (alertAudio != null) {
                    alertAudio.stop();
                    timer.restart();
                }
                break;
            }
        }

    }

    private void loadDataToTable(ArrayList<IPMAC> old_ip_mac_list, ArrayList<IPMAC> new_ip_mac_list) throws IOException, UnsupportedAudioFileException, LineUnavailableException {
        new_ip_mac_list = scanARPTable();
        new_ip_mac_list = checkARPTable(old_ip_mac_list, new_ip_mac_list, log);
        data=new Object[new_ip_mac_list.size()][4];
        for (int i = 0; i < new_ip_mac_list.size(); i++) {
            check &= new_ip_mac_list.get(i).isKT();
            data[i][0] = (new_ip_mac_list.get(i).isKT() == true ? new ImageIcon("D:\\Java\\PTIT_ARP_POLICE\\src\\ptit_arp_police\\yes1.png") : new ImageIcon("D:\\Java\\PTIT_ARP_POLICE\\src\\ptit_arp_police\\no1.png"));
            data[i][1] = new_ip_mac_list.get(i).getIP();
            data[i][2] = new_ip_mac_list.get(i).getMAC();
            data[i][3] = new_ip_mac_list.get(i).getTime();
        }
        model = new DefaultTableModel(data, column) {
            public Class getColumnClass(int column) {
                if (column == 4) {
                    return Icon.class;
                }
                return getValueAt(0, column).getClass();
            }
            public boolean isCellEditable(int row, int column) {
                return false;
            }
            public boolean isRowEdiable(int row, int column) {
                return false;
            }
        };
        model.setDataVector(data, column);
        jTable1.setModel(model);
        jTable1.setRowHeight(40);
        jTable1.setEnabled(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.getTableHeader().setResizingAllowed(false);
        old_ip_mac_list = (ArrayList) new_ip_mac_list.clone();
        if (check == true) {
            lbCheck.setIcon(isNone);
            txtAlert.setText("No ARP Attacks");
        } else if (check == false) {
            lbCheck.setIcon(isAttacked);
            txtAlert.setText("You are being ARP attacked!!!");
            ghiFile(log.getTime()+"\n"+log.getInfo());
            if (chBoxAudio.isSelected()) {
                alertAudio = new AlertAudio();
                alertAudio.play();
            }
            ArpConfirm();
            if (chBoxEmail.isSelected()) {
                try{
                    Mailer.send("taistudymyself.1@gmail.com", "chitai270901@", txtEmail.getText(), "ALERT ***You are being ARP attacked!!!***", "***PTITHCM_ARP_POLICE***\n\n" + log.getInfo() + "\n\n" + log.getTime());

                } catch (Exception ee)
                {
                    System.out.print("Some things went wrong!\n");
                }
            }
        }
    }
    public static ArrayList<IPMAC> scanARPTable() throws UnknownHostException, IOException {
        ProcessBuilder builder = new ProcessBuilder(
                "cmd.exe", "/c", "arp -a -N " + InetAddress.getLocalHost().getHostAddress());
        builder.redirectErrorStream(true);
        Process p = builder.start();
        BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));
        r.readLine();
        r.readLine();
        r.readLine();
        String line;
        String l[];
        ArrayList<IPMAC> ip_mac_list = new ArrayList<>();
        while (true) {
            line = r.readLine();
            if (line == null) {
                break;
            }
            l = line.split("\\s+");
            if (l[3].equals("static")) {
                break;
            }
            ip_mac_list.add(new IPMAC(l[1], l[2], true, new Date().toString()));
        }
        return ip_mac_list;
    }

    public static ArrayList<IPMAC> checkARPTable(ArrayList<IPMAC> old_ip_mac_list, ArrayList<IPMAC> ip_mac_list, Log log) {
        String log_info = "";
        for (int i = 0; i < old_ip_mac_list.size(); i++) {
            for (int j=0;j<ip_mac_list.size();j++){
                if (old_ip_mac_list.get(i).getIP().equals(ip_mac_list.get(j).getIP()) && !old_ip_mac_list.get(i).getMAC().equals(ip_mac_list.get(j).getMAC())) {
                    log_info += old_ip_mac_list.get(i).getIP() + " have MAC: " + old_ip_mac_list.get(i).getMAC() + " changed to: " + ip_mac_list.get(j).getMAC() + "\n";
                    ip_mac_list.get(i).setKT(false);
                    break;
                }
            }  
        }
        for (int i = 0; i < ip_mac_list.size() - 1; i++) {
            for (int j = i + 1; j < ip_mac_list.size(); j++) {
                if (ip_mac_list.get(i).getMAC().equals(ip_mac_list.get(j).getMAC())) {
                    log_info += ip_mac_list.get(i).getIP() + " and " + ip_mac_list.get(j).getIP() + " have the same MAC: " + ip_mac_list.get(i).getMAC() + "\n";
                    ip_mac_list.get(i).setKT(false);
                    ip_mac_list.get(j).setKT(false);
                }
            }
        }
        if (log_info.length() != 0) {
            log.setTime(new Date().toString());
            log.setInfo(log_info);
        }
        return ip_mac_list;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        try {
            check = true;
            loadDataToTable(old_ip_mac_list, new_ip_mac_list);
            System.out.print(check);
        } catch (IOException ex) {
            Logger.getLogger(ArpDetectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(ArpDetectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(ArpDetectForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public static void ghiFile(String s)
    {
        try {
            FileWriter myWriter = new FileWriter("D:\\Java\\PTIT_ARP_POLICE\\src\\ptit_arp_police\\log.txt",true);
            myWriter.write(s);
            myWriter.close();
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }
}
